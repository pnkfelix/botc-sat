#lang racket

;; =============================================================================
;; PLT REDEX TUTORIAL: Blood on the Clocktower Validation
;; =============================================================================
;; 
;; Teaching PLT Redex through modeling BOTC from the Storyteller's perspective:
;; 1. Circle of players (the fundamental seed)
;; 2. Script selection (available roles) 
;; 3. Bag formation (script + player count → legal distribution)
;; 4. Role assignment (bag → players get roles)
;; 5. Game validation (checking legality of states)

(require redex/reduction-semantics)
(provide (all-defined-out))

;; =============================================================================
;; PART 1: THE STORYTELLER'S WORLD
;; =============================================================================

(define-language BOTC
  ;; The fundamental seed: a circle of players (simplified!)
  [player ::= variable-not-otherwise-mentioned]  ; Alice, Bob, Charlie, etc.
  [circle ::= (player-circle player ...)]
  
  ;; Available roles in a script  
  [role-name ::= washerwoman librarian chef empath imp baron drunk]
  [role-type ::= Townsfolk Outsider Minion Demon]
  [role ::= (role role-name role-type)]
  [script ::= (script role ...)]
  
  ;; Numbers and counts
  [num ::= natural]
  [distribution ::= (dist (Townsfolk num) (Outsider num) (Minion num) (Demon num))]
  
  ;; Pattern variables (enable underscore patterns like n_townsfolk, p_alice)
  [n ::= natural]
  [p ::= variable-not-otherwise-mentioned]
  [r ::= variable-not-otherwise-mentioned])

;; Test our basic language
(display "=== BOTC Language Defined ===\n")

;; Create a simple 5-player circle  
(define example-circle 
  (term (player-circle Alice Bob Charlie Diana Eve)))

(display (format "Example circle: ~a\n" example-circle))

;; =============================================================================
;; PART 2: FROM CIRCLE TO BAG (The Core BOTC Logic)
;; =============================================================================

;; Step 1: How many players are in the circle?
(define-metafunction BOTC
  player-count : circle -> num
  [(player-count (player-circle)) 0]
  [(player-count (player-circle p_1 p_rest ...)) ,(length (term (p_1 p_rest ...)))])

;; Step 2: Given player count, what's the base distribution? (Official BOTC rules)
(define-metafunction BOTC
  base-distribution : num -> distribution
  [(base-distribution 5) (dist (Townsfolk 3) (Outsider 0) (Minion 1) (Demon 1))]
  [(base-distribution 6) (dist (Townsfolk 3) (Outsider 1) (Minion 1) (Demon 1))]
  [(base-distribution 7) (dist (Townsfolk 5) (Outsider 0) (Minion 1) (Demon 1))]
  [(base-distribution 8) (dist (Townsfolk 5) (Outsider 1) (Minion 1) (Demon 1))]
  [(base-distribution 9) (dist (Townsfolk 5) (Outsider 2) (Minion 1) (Demon 1))])

;; Let's debug this step by step!
(display "=== DEBUGGING PLT REDEX PATTERNS ===\n")

;; First, let's test if our language recognizes the circle
(display (format "Circle matches language? ~a\n" 
                 (redex-match BOTC circle example-circle)))

;; Test if pattern matching works
(display (format "Pattern (player-circle p_1 p_rest ...) matches? ~a\n"
                 (redex-match BOTC (player-circle p_1 p_rest ...) example-circle)))

(module+ test
  (require rackunit)
  
  ;; Comment out the failing test for now
  ;; (check-equal? (term (player-count ,example-circle)) 5)
  (check-equal? (term (base-distribution 7)) 
                (term (dist (Townsfolk 5) (Outsider 0) (Minion 1) (Demon 1))))
  
  (display "Basic tests passed!\n"))

;; =============================================================================
;; YOUR TURN: Before we continue...
;; =============================================================================

;; Questions to make sure you're following:
;; 1. Why did we need to declare `[p ::= variable-not-otherwise-mentioned]`?
;; 2. How does the pattern `(circle p_first p_rest ...)` work in player-count?
;; 3. What would happen if we had 10 players but no base-distribution rule for 10?

;; Next up: Role constraints (Baron, Drunk) and script validation!

(display "Ready to continue? Answer the questions above!\n")